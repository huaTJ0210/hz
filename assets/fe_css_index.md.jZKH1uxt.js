import{_ as s,o as i,c as a,R as l}from"./chunks/framework.TViiy-gH.js";const n="/hz/assets/box-type.1Oo-61UZ.png",y=JSON.parse('{"title":"CSS","description":"","frontmatter":{},"headers":[],"relativePath":"fe/css/index.md","filePath":"fe/css/index.md"}'),h={name:"fe/css/index.md"},t=l(`<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h2 id="选择器" tabindex="-1">选择器 <a class="header-anchor" href="#选择器" aria-label="Permalink to &quot;选择器&quot;">​</a></h2><h3 id="基础选择器" tabindex="-1">基础选择器 <a class="header-anchor" href="#基础选择器" aria-label="Permalink to &quot;基础选择器&quot;">​</a></h3><blockquote><p>标签、id、class、*(通配符)</p></blockquote><h3 id="复合选择器" tabindex="-1">复合选择器 <a class="header-anchor" href="#复合选择器" aria-label="Permalink to &quot;复合选择器&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*(1)包含选择器：某元素内部指定的所有元素*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.first</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*（2）并集选择器:一次选择多个元素*/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*（3）后代选择器：只选择指定元素下的儿子元素*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="css-伪类和-css-伪元素" tabindex="-1">CSS 伪类和 CSS 伪元素 <a class="header-anchor" href="#css-伪类和-css-伪元素" aria-label="Permalink to &quot;CSS 伪类和 CSS 伪元素&quot;">​</a></h3><blockquote><p>向某些选择器添加特殊效果</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">black</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:first-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*向元素的第一个子元素p[html中第一个p元素标签]*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:first-letter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*向文本的第一个字母添加样式*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:first-line</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*向文本的首行添加特殊样式*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*在元素前添加内容*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;logo.gif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*在元素后添加内容*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="结构伪类选择器" tabindex="-1">结构伪类选择器 <a class="header-anchor" href="#结构伪类选择器" aria-label="Permalink to &quot;结构伪类选择器&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:firstchild{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">white</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:lastchild{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">even</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:nth-last-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">even</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:nth-type-child(odd){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:nth-type-last-child(odd){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="css-的元素显示模式" tabindex="-1">CSS 的元素显示模式 <a class="header-anchor" href="#css-的元素显示模式" aria-label="Permalink to &quot;CSS 的元素显示模式&quot;">​</a></h2><h3 id="显示模式种类" tabindex="-1">显示模式种类 <a class="header-anchor" href="#显示模式种类" aria-label="Permalink to &quot;显示模式种类&quot;">​</a></h3><blockquote><ul><li>块级元素(block)：一行只能放置一个块级元素，可以设置宽高</li><li>行内元素(inline)：一行可以放置多个行内元素，不可以直接设置宽高</li><li>行内块元素(inline-block)：同行内元素特性，但是可以设置宽高；</li></ul></blockquote><h3 id="显示模式转换" tabindex="-1">显示模式转换 <a class="header-anchor" href="#显示模式转换" aria-label="Permalink to &quot;显示模式转换&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*将行内元素修改为块级元素，使得宽和高的设置生效，单独一行显示*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*将行级元素修改为行块级元素*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*将行内元素修改为行块级元素，使得宽和高的设置生效*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="css-的三大特性" tabindex="-1">CSS 的三大特性 <a class="header-anchor" href="#css-的三大特性" aria-label="Permalink to &quot;CSS 的三大特性&quot;">​</a></h2><h3 id="层叠性" tabindex="-1">层叠性 <a class="header-anchor" href="#层叠性" aria-label="Permalink to &quot;层叠性&quot;">​</a></h3><blockquote><p>层叠是多个 CSS 规则发生冲突该如何解决；遵循以下三种规则：</p><ul><li>样式表的来源 （css 文件、style、内联样式）</li><li>选择器的优先级（见 3.3-优先级）</li><li>源码的出现顺序</li></ul><p>层叠的注意事项：</p><ul><li>不建议使用 ID 选择器</li><li>非必要情况下不要使用！important</li></ul></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*如果出现重复定义会覆盖*/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*设置的颜色会覆盖red的设置*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="继承性" tabindex="-1">继承性 <a class="header-anchor" href="#继承性" aria-label="Permalink to &quot;继承性&quot;">​</a></h3><blockquote><p>继承是沿着 DOM 树的节点向下的</p><p>和文本相关的属性能够被继承：color、font、font-family、font-size 等等</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;p中的文本颜色会继承div中的设置&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h3><blockquote><ol><li><p>继承或者通配符（*）权重： 0，0，0，0</p></li><li><p>元素选择器权重：0，0，0，1</p></li><li><p>类选择器权重：0，0，1，0</p></li><li><p>id 选择器权重：0，1，0，0</p></li><li><p>元素设置 style 权重：1，0，0，0</p><p><strong>权重高的 CSS 样式会覆盖权重低设置的样式</strong> ；<code>color: red !important;</code>优先级高于内联样式</p></li></ol></blockquote><h2 id="css-中的单位" tabindex="-1">CSS 中的单位 <a class="header-anchor" href="#css-中的单位" aria-label="Permalink to &quot;CSS 中的单位&quot;">​</a></h2><h3 id="像素" tabindex="-1">像素 <a class="header-anchor" href="#像素" aria-label="Permalink to &quot;像素&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>px:CSS 中像素是逻辑像素并不等同于物理像素，尤其在高清（视网膜）屏幕下会根据硬件做适当缩放，通常 96px=1 英寸 = 2.54cm</span></span>
<span class="line"><span>dp pt : device independent pixels 设备无关像素</span></span>
<span class="line"><span>dpr: devicePixelRatio 设备像素缩放比</span></span>
<span class="line"><span></span></span>
<span class="line"><span>计算公式： 1px = （dpr）^2 * dp;</span></span>
<span class="line"><span>iphone5:</span></span>
<span class="line"><span> 设备像素：640dp * 1136dp</span></span>
<span class="line"><span> 逻辑像素：320px * 568px</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DPI/PPI : 单位英寸内的像素密度</span></span>
<span class="line"><span>PPI越高，像素越高，图像越清晰</span></span>
<span class="line"><span>可视度越低，系统默认设置缩放比越大</span></span>
<span class="line"><span>           ldpi  mdpi  hdpi xhdpi</span></span>
<span class="line"><span>ppi        120    160  240   320</span></span>
<span class="line"><span>默认缩放比   0.75   1    1.5   2.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>设备分辨率：  1136*640dp ===》 √(1136^2 + 640^2) / 4 = 326ppi</span></span>
<span class="line"><span>326ppi属于retina屏幕，dpr=2</span></span>
<span class="line"><span>1px = dpr^2 * dp;</span></span>
<span class="line"><span>iphone5的屏幕为： 320 * 568 px；</span></span></code></pre></div><h3 id="em-和-rem" tabindex="-1">em 和 rem <a class="header-anchor" href="#em-和-rem" aria-label="Permalink to &quot;em 和 rem&quot;">​</a></h3><blockquote><ul><li>em ： 当前元素的字号大小，元素内外边距、元素大小可以使用 em 做单位</li><li>rem: 根元素的字号大小，元素字体大小可以使用 rem 做单位</li><li>根节点 html 有个伪类选择器（:root）</li></ul></blockquote><h3 id="视口的相对单位" tabindex="-1">视口的相对单位 <a class="header-anchor" href="#视口的相对单位" aria-label="Permalink to &quot;视口的相对单位&quot;">​</a></h3><blockquote><ul><li>视口： 浏览器窗口网页可见部分的边框区域，它不包括浏览器的地址栏、工具栏、状态栏</li><li>vh ： 视口高度的 1/100</li><li>vw: 视口宽度的 1/100</li><li>vmin： vh 和 vw 中最小的</li><li>vmax： vh 和 vw 中最大的*</li></ul></blockquote><h3 id="css-自定义变量" tabindex="-1">CSS 自定义变量 <a class="header-anchor" href="#css-自定义变量" aria-label="Permalink to &quot;CSS 自定义变量&quot;">​</a></h3><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">em</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  --main-fontsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /*使用自定义属性*/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">--main-fontsize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h2><p><img src="`+n+`" alt="box"></p><h3 id="盒模型类型" tabindex="-1">盒模型类型 <a class="header-anchor" href="#盒模型类型" aria-label="Permalink to &quot;盒模型类型&quot;">​</a></h3><blockquote><ul><li>默认盒模型 <code>box-sizing:content-box</code> : 渲染元素的最终宽度 = width + border-left + border-right + padding-left + padding-right</li><li><code>box-sizing: border-box</code>: 渲染元素的最终宽度为固定设置的 width 的宽度 (已包含：元素 width、border、padding)</li></ul></blockquote><h3 id="普通文档流" tabindex="-1">普通文档流 <a class="header-anchor" href="#普通文档流" aria-label="Permalink to &quot;普通文档流&quot;">​</a></h3><blockquote><ul><li>网页元素的默认布局行为，行内元素会随文字方向从左到右排列，到达容器边缘后会折行，块级元素会占一整行，前后有换行</li><li>限定宽度和无限高度设计的,内容会填满视口的宽度，在必要的时候折行显示，因此容器的高度由内容决定</li></ul></blockquote><h4 id="控制溢出行为" tabindex="-1">控制溢出行为 <a class="header-anchor" href="#控制溢出行为" aria-label="Permalink to &quot;控制溢出行为&quot;">​</a></h4><blockquote><p>明确设置容器高度后，显示不全内容就会溢出</p><ul><li>设置 overflow 的属性： hidden、visible、auto、scroll</li><li>overflow-x overflow-y 分别控制水平和垂直方向上的溢出</li></ul></blockquote><h4 id="实现等高列的方案" tabindex="-1">实现等高列的方案 <a class="header-anchor" href="#实现等高列的方案" aria-label="Permalink to &quot;实现等高列的方案&quot;">​</a></h4><blockquote><ul><li>容器盒子设置 display：table； 子项 设置 display：table-cell；但不建议使用</li><li>flex 布局 ： 弹性容器内的子元素默认是等高的</li></ul></blockquote><h4 id="实现垂直居中" tabindex="-1">实现垂直居中 <a class="header-anchor" href="#实现垂直居中" aria-label="Permalink to &quot;实现垂直居中&quot;">​</a></h4><blockquote><p><em>vertical-align：只对行内块元素生效，块级元素会忽略这个属性设置</em></p><ul><li>容器高度不固定时：给元素设置相等的上下内边距</li><li>flexbox 布局</li><li>容器内文字只有一行：line-height = height</li><li>容器和内容的高度都已知: 绝对定位设置垂直居中 : top：50%；margin-top : - height/2;</li><li>容器高度已知，元素高度未知: 绝对定位设置垂直居中： top：50%；transform: translateY(-50%);</li></ul></blockquote><h4 id="实现-div-的垂直水平居中" tabindex="-1">实现 div 的垂直水平居中 <a class="header-anchor" href="#实现-div-的垂直水平居中" aria-label="Permalink to &quot;实现 div 的垂直水平居中&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    .box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      margin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aqua</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    .parent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  使用flex原因是上下空白空间被占用（猜测），如果不使用margin-top、margin-bottom设置为auto计算的值是0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;div class=&quot;parent&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      &lt;div class=&quot;box&quot;&gt;123&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><h4 id="外边距塌陷" tabindex="-1">外边距塌陷 <a class="header-anchor" href="#外边距塌陷" aria-label="Permalink to &quot;外边距塌陷&quot;">​</a></h4><blockquote><p>相邻盒子的上下外边距相邻，最终的间距选择间距中最大的值；</p></blockquote><h5 id="如何解决外边距塌陷" tabindex="-1">如何解决外边距塌陷 <a class="header-anchor" href="#如何解决外边距塌陷" aria-label="Permalink to &quot;如何解决外边距塌陷&quot;">​</a></h5><blockquote><ul><li>对容器设置 overflow 为非 visible 的值</li><li>设置元素为浮动、内联块、绝对定位或者固定定位</li><li>使用 flexbox 布局</li></ul></blockquote><h4 id="padding-的计算" tabindex="-1">padding 的计算 <a class="header-anchor" href="#padding-的计算" aria-label="Permalink to &quot;padding 的计算&quot;">​</a></h4><blockquote><p>当 padding 的值设为百分比时，其值是相对于父元素的 width 计算的</p></blockquote><h5 id="css-实现元素高度是父容器宽度的一半-子元素高度可以根据父容器的宽度发生等比例变化" tabindex="-1">css 实现元素高度是父容器宽度的一半，子元素高度可以根据父容器的宽度发生等比例变化 <a class="header-anchor" href="#css-实现元素高度是父容器宽度的一半-子元素高度可以根据父容器的宽度发生等比例变化" aria-label="Permalink to &quot;css 实现元素高度是父容器宽度的一半，子元素高度可以根据父容器的宽度发生等比例变化&quot;">​</a></h5><blockquote><ul><li>当父视图是 viewport（视口时），可以直接设置子元素的高度为：50vw</li><li>当父元素固定宽高时，使用 flex 布局实现垂直水平居中，然后设置 padding: 25% 0 ; 同时设置 height：0 则可以实现</li><li>使用 absolute 定位，将子元素的 left、right、top、bottom 均设置为 0；然后使用 margin 设置水平布局，设置 padding: 25% 0 ; 同时设置 height：0 实现高度为父元素的一半；</li></ul></blockquote><h4 id="margin-的计算" tabindex="-1">margin 的计算 <a class="header-anchor" href="#margin-的计算" aria-label="Permalink to &quot;margin 的计算&quot;">​</a></h4><blockquote><p>当 margin 的值设为百分比时，其值是相对于父元素的 width 计算的</p></blockquote><h3 id="css-常见问题" tabindex="-1">CSS 常见问题 <a class="header-anchor" href="#css-常见问题" aria-label="Permalink to &quot;CSS 常见问题&quot;">​</a></h3><h4 id="css3-硬件加速" tabindex="-1">CSS3 硬件加速 <a class="header-anchor" href="#css3-硬件加速" aria-label="Permalink to &quot;CSS3 硬件加速&quot;">​</a></h4><blockquote><ul><li>CSS3 硬件加速也叫 GPU 加速，直接使用 GPU 渲染，减少 CPU 操作，不会触发重绘（repaint），因此能提升网页的性能；</li><li>支持的 CSS 属性：transform、opacity、filter</li><li>注意事项 <ul><li>GPU 处理的内容过多会导致内存问题，尤其移动端的内存使用不当会导致崩溃</li><li>GPU 渲染字体会导致抗锯齿无效，文本在动画期间会很模糊；</li></ul></li></ul></blockquote><h4 id="分析几种-css-属性设置隐藏的特点" tabindex="-1">分析几种 CSS 属性设置隐藏的特点 <a class="header-anchor" href="#分析几种-css-属性设置隐藏的特点" aria-label="Permalink to &quot;分析几种 CSS 属性设置隐藏的特点&quot;">​</a></h4><blockquote><ul><li><code>display:none</code> : 元素不会出现在渲染树上，渲染时不占据任何的空间，不可以点击；修改属性导致元素重新显示会引发重排（重流），影响性能，而且隐藏的元素不会被读屏器读取；==会影响后代节点==</li><li><code>visibility：hidden</code>: 会出现在视图树上，元素不显示，不可以点击，修改属性只会引发重绘，性能影响较少，读屏器能读取</li><li><code>opacity：0</code> ： 元素会会出现在视图树上，元素不显示，但可以点击，修改元素属性影响最少；==会影响后代节点==</li></ul></blockquote><h4 id="如何覆盖-修改-css-中的-important" tabindex="-1">如何覆盖(修改)CSS 中的!important <a class="header-anchor" href="#如何覆盖-修改-css-中的-important" aria-label="Permalink to &quot;如何覆盖(修改)CSS 中的!important&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">在不修改代码(可添加)的前提下如何让图片的宽度修改为300px：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:480px!important&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">解法如下：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:480px!important; max-width=300px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:480px!important;transform:scale(0.625,1)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.png&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width:480px!important;width:300px!important;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><h4 id="如何解决-retina-屏幕-1px-的问题" tabindex="-1">如何解决 Retina 屏幕 1px 的问题 <a class="header-anchor" href="#如何解决-retina-屏幕-1px-的问题" aria-label="Permalink to &quot;如何解决 Retina 屏幕 1px 的问题&quot;">​</a></h4><blockquote><p>在 750 的设计稿设计了 1px 的边框，实际代码中要使用 1/2px,而 CSS 不支持小数只能显示 1px，导致边框变粗了；</p><p>可以使用 border:thin</p><p>==目前该问题已经基本不存在了，如果使用代码则可以使用伪元素+scale 缩放完成==</p></blockquote><h4 id="如何实现骨架屏" tabindex="-1">如何实现骨架屏 <a class="header-anchor" href="#如何实现骨架屏" aria-label="Permalink to &quot;如何实现骨架屏&quot;">​</a></h4><blockquote><p>待补充</p></blockquote><h4 id="flex-布局中-flex-属性" tabindex="-1">Flex 布局中 flex 属性 <a class="header-anchor" href="#flex-布局中-flex-属性" aria-label="Permalink to &quot;Flex 布局中 flex 属性&quot;">​</a></h4><blockquote><ul><li>flex-grow ： 如果容器剩有余空间，项目的放大比例，默认为 0，不放大</li><li>flex-shrink ：如果容器的剩余空间不足，项目的所有比例，默认为 1，空间不足时缩小</li><li>flex-basis： 定义了在分配多余空间之前，项目占据的主轴空间（main size），默认值为 auto, 即项目本身的大小</li></ul></blockquote><h5 id="flex-1" tabindex="-1">flex：1 <a class="header-anchor" href="#flex-1" aria-label="Permalink to &quot;flex：1&quot;">​</a></h5><blockquote><p>容器有剩余空间时，忽略子项自身的 size，完全填充</p><ul><li>flex-grow ：1</li><li>flex-shrink ：1</li><li>flex-basis：0%</li></ul></blockquote><h5 id="flex-auto" tabindex="-1">flex：auto <a class="header-anchor" href="#flex-auto" aria-label="Permalink to &quot;flex：auto&quot;">​</a></h5><blockquote><p>容器有剩余空间时，先计算子项自身的 size，然后再平均分配</p><ul><li>flex-grow ：1</li><li>flex-shrink ：1</li><li>flex-basis：auto</li></ul></blockquote><h5 id="flex-none" tabindex="-1">flex：none <a class="header-anchor" href="#flex-none" aria-label="Permalink to &quot;flex：none&quot;">​</a></h5><blockquote><p>计算子项自身的 size，填充容器</p><ul><li>flex-grow ：0</li><li>flex-shrink ：0</li><li>flex-basis：auto</li></ul></blockquote><h5 id="flex-initial" tabindex="-1">flex：initial <a class="header-anchor" href="#flex-initial" aria-label="Permalink to &quot;flex：initial&quot;">​</a></h5><blockquote><ul><li>flex-grow ：0</li><li>flex-shrink ：1</li><li>flex-basis：auto</li></ul></blockquote><h3 id="css-规范" tabindex="-1">CSS 规范 <a class="header-anchor" href="#css-规范" aria-label="Permalink to &quot;CSS 规范&quot;">​</a></h3><blockquote><ul><li>命名规范</li><li>属性设置顺序等</li></ul></blockquote><h3 id="css-modules" tabindex="-1">CSS-Modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;CSS-Modules&quot;">​</a></h3><blockquote><p><a href="https://www.ruanyifeng.com/blog/2016/06/css_modules.html" target="_blank" rel="noreferrer">CSS Modules 用法教程</a></p><p><a href="https://segmentfault.com/a/1190000039846173" target="_blank" rel="noreferrer">深入浅出</a></p><p><a href="https://segmentfault.com/a/1190000019538288?utm_source=sf-similar-article" target="_blank" rel="noreferrer">CSS Modules</a></p></blockquote><h4 id="使用-css-module-的项目修改-antd-的组件样式" tabindex="-1">使用 CSS Module 的项目修改 antd 的组件样式 <a class="header-anchor" href="#使用-css-module-的项目修改-antd-的组件样式" aria-label="Permalink to &quot;使用 CSS Module 的项目修改 antd 的组件样式&quot;">​</a></h4><blockquote><p>css module 针对全局的样式（使用<code>:global</code>包裹的），不会将类名进行 hash 化，因此可以将 antd 组件外部用来精细化控制样式的类定义在<code>:global</code>中，这样就避免了类名 hash 化，可以配合 antd 的类名规则，实现样式控制</p></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 修改antd List组件的背景色</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:global(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.adm-list-body-inner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#f1f1f1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="postcss" tabindex="-1">PostCSS <a class="header-anchor" href="#postcss" aria-label="Permalink to &quot;PostCSS&quot;">​</a></h3><blockquote><p><a href="https://www.zhihu.com/question/46312839" target="_blank" rel="noreferrer">post-css 是啥</a></p></blockquote><h3 id="tailwindcss" tabindex="-1">tailwindcss <a class="header-anchor" href="#tailwindcss" aria-label="Permalink to &quot;tailwindcss&quot;">​</a></h3><blockquote><p><a href="https://www.tailwindcss.cn/docs" target="_blank" rel="noreferrer">tailwindcss</a></p></blockquote><h3 id="sass" tabindex="-1">sass <a class="header-anchor" href="#sass" aria-label="Permalink to &quot;sass&quot;">​</a></h3><h3 id="less" tabindex="-1">less <a class="header-anchor" href="#less" aria-label="Permalink to &quot;less&quot;">​</a></h3><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><blockquote><ul><li>《深入解析 CSS》</li></ul></blockquote>`,94),p=[t];function e(k,r,d,E,o,c){return i(),a("div",null,p)}const u=s(h,[["render",e]]);export{y as __pageData,u as default};
